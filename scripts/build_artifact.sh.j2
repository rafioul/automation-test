#!/bin/bash

WORK_DIR=$WORKSPACE
THEME_DIR=$WORKSPACE/themes
WP_PLUGINS_DIR=$WORKSPACE/plugins

if [ $GIT_REPO_NAME == "postmedia-theme-communities" ]; then
	VIP_PLUGIN_DIR=$WORKSPACE/themes/postmedia-vendor-plugins
	PMD_PLUGIN_DIR=$WORKSPACE/themes/postmedia-plugins
else
	VIP_PLUGIN_DIR=$WORKSPACE/themes/vip/plugins
	PMD_PLUGIN_DIR=$WORKSPACE/themes/vip/postmedia-plugins
fi

PLUGIN_LIST_DIR=$PMD_PLUGIN_DIR/postmedia-library/classes/Postmedia/Web

git config --global credential.helper "cache --timeout=600"

# Checkout postmedia-theme-core repo
git clone https://$GIT_CREDS@github.com/Postmedia-Digital/postmedia-theme-core.git $THEME_DIR/postmedia-theme-core


# Checkout postmedia-plugins
mkdir -p $PMD_PLUGIN_DIR
cd $PMD_PLUGIN_DIR

git clone https://$GIT_CREDS@github.com/Postmedia-Digital/postmedia-library.git $PMD_PLUGIN_DIR/postmedia-library

# Temporary cloning newly added postmedia-plugins as they are not added as Communities theme dependacy
git clone https://$GIT_CREDS@github.com/Postmedia-Digital/postmedia-plugin-longform.git $PMD_PLUGIN_DIR/postmedia-plugin-longform
git clone https://$GIT_CREDS@github.com/Postmedia-Digital/postmedia-plugin-newsletter.git $PMD_PLUGIN_DIR/postmedia-plugin-newsletter
git clone https://$GIT_CREDS@github.com/Postmedia-Digital/postmedia-plugin-sunshinegalleries.git $PMD_PLUGIN_DIR/postmedia-plugin-sunshinegalleries
git clone https://$GIT_CREDS@github.com/Postmedia-Digital/kaltura-all-in-one-video-pack.git $PMD_PLUGIN_DIR/all-in-one-video-pack
git clone https://$GIT_CREDS@github.com/Postmedia-Digital/pointer-plugin.git $PMD_PLUGIN_DIR/pointer-plugin

# Cloning all VIP plugins and Postmedia Library plugins required by THEME
echo "Cloning all VIP plugins and Postmedia Library plugins required by THEME"
cp /opt/scripts/plugin_repo_mapping.json $WORKSPACE/plugin_repo_mapping.json
plugin_count=$(jq ".data.attributes.plugins | length" $THEME_DIR/$GIT_REPO_NAME/configuration/theme.json)

for (( i=0; i<$plugin_count; i++ ))
do
	plugin_type=$(jq -r ".data.attributes.plugins[$i].attributes.location" $THEME_DIR/$GIT_REPO_NAME/configuration/theme.json)
	plugin_name=$(jq -r ".data.attributes.plugins[$i].id" $THEME_DIR/$GIT_REPO_NAME/configuration/theme.json)
	is_required=$(jq -r ".data.attributes.plugins[$i].attributes.required" $THEME_DIR/$GIT_REPO_NAME/configuration/theme.json)
    if [ "$plugin_type" == "vip-plugins" -a "$is_required" == "true" ]; then
		version=$(jq -r ".data.attributes.plugins[] | select(.id == \"$plugin_name\") | .attributes.version" $PMD_PLUGIN_DIR/postmedia-library/configuration/global.json)
        if [ "$version" != "false" -a "$version" != "null" ]; then
	    	svn co https://vip-svn.wordpress.com/plugins/$plugin_name'-'$version $VIP_PLUGIN_DIR/$plugin_name'-'$version > /dev/null
	    else
	    	svn co https://vip-svn.wordpress.com/plugins/$plugin_name $VIP_PLUGIN_DIR/$plugin_name > /dev/null
	    fi
	elif [ $plugin_type == "postmedia-plugins" -a $is_required == "true" ]; then
        pmd_plugin_name_in_github=$(jq -r ".repo_mapping[\"$plugin_name\"]" $WORKSPACE/plugin_repo_mapping.json)
		if [ "$pmd_plugin_name_in_github" == "null" ]; then
			git clone https://$GIT_CREDS@github.com/Postmedia-Digital/$plugin_name $PMD_PLUGIN_DIR/$plugin_name > /dev/null
		else
			git clone https://$GIT_CREDS@github.com/Postmedia-Digital/$pmd_plugin_name_in_github $PMD_PLUGIN_DIR/$plugin_name > /dev/null
		fi
	fi
done


# Cloning VIP-plugins required by Postmedia-Library
echo "Cloning plugins required by Postmedia-Library"
plugin_count=$(jq ".data.attributes.plugins | length" $PMD_PLUGIN_DIR/postmedia-library/configuration/global.json)
for (( i=0; i<$plugin_count; i++ ))
do
	plugin_type=$(jq -r ".data.attributes.plugins[$i].attributes.location" $PMD_PLUGIN_DIR/postmedia-library/configuration/global.json)
	plugin_name=$(jq -r ".data.attributes.plugins[$i].id" $PMD_PLUGIN_DIR/postmedia-library/configuration/global.json)
	is_required=$(jq -r ".data.attributes.plugins[$i].attributes.required" $PMD_PLUGIN_DIR/postmedia-library/configuration/global.json)
    if [ "$plugin_type" == "vip-plugins" -a "$is_required" == "true" ]; then
        version=$(jq -r ".data.attributes.plugins[$i].attributes.version" $PMD_PLUGIN_DIR/postmedia-library/configuration/global.json)
        if [ "$version" != "false" -a "$version" != "null" ]; then
	    	svn co https://vip-svn.wordpress.com/plugins/$plugin_name'-'$version $VIP_PLUGIN_DIR/$plugin_name'-'$version > /dev/null
	    else
	    	svn co https://vip-svn.wordpress.com/plugins/$plugin_name $VIP_PLUGIN_DIR/$plugin_name > /dev/null
	    fi
	fi
done


# Checkout psmcm brunch as part of Communities depandacy
if [ $GIT_REPO_NAME == "postmedia-theme-communities" ]; then
	/opt/scripts/git-checkout-psmcm-branch.sh $JOB_NAME
fi


# Add tag to theme repo and its dependent repos
# TODO: Need to find only 'v' tags as repos are configured having different types of tags
echo "Creating Tag and release.json file..."
current_version=$(git -C $THEME_DIR/$GIT_REPO_NAME/ describe --tags $(git -C $THEME_DIR/$GIT_REPO_NAME/ rev-list --tags --max-count=1))
echo "Current Tag is $current_version"

# Cloning vip-wpcom-mu-plugins
git clone --recurse-submodules https://github.com/automattic/vip-wpcom-mu-plugins $WORK_DIR/mu-plugins

# Note: git push tag is disabled in the script for now
new_version=`/usr/bin/python /opt/scripts/gitTagging.py $current_version "$GIT_TRIGGER_AUTHOR" "$GIT_PR_TITLE" $GIT_REPO_NAME $WORK_DIR $VIP_PLUGIN_DIR $PMD_PLUGIN_DIR`
echo "New Tag is $new_version"

# Cloning Wordpress plugins
git clone https://$GIT_CREDS@github.com/Postmedia-Digital/image-magic.git $WP_PLUGINS_DIR/image-magic
cd $WP_PLUGINS_DIR
wget -nd https://downloads.wordpress.org/plugin/cdn-enabler.1.0.6.zip; unzip cdn-enabler.1.0.6.zip; rm cdn-enabler.1.0.6.zip
wget -nd https://downloads.wordpress.org/plugin/debug-bar.0.9.zip; unzip debug-bar.0.9.zip; rm debug-bar.0.9.zip
wget -nd https://downloads.wordpress.org/plugin/debug-bar-console.0.3.zip; unzip debug-bar-console.0.3.zip; rm debug-bar-console.0.3.zip
wget -nd https://downloads.wordpress.org/plugin/post-meta-inspector.1.1.1.zip; unzip post-meta-inspector.1.1.1.zip; rm post-meta-inspector.1.1.1.zip
wget -nd https://downloads.wordpress.org/plugin/query-monitor.2.17.0.zip; unzip query-monitor.2.17.0.zip; rm query-monitor.2.17.0.zip
wget -nd https://downloads.wordpress.org/plugin/redis-cache.1.3.5.zip; unzip redis-cache.1.3.5.zip; rm redis-cache.1.3.5.zip
wget -nd https://downloads.wordpress.org/plugin/regenerate-thumbnails.3.0.1.zip; unzip regenerate-thumbnails.3.0.1.zip; rm regenerate-thumbnails.3.0.1.zip
wget -nd https://downloads.wordpress.org/plugin/vip-scanner.0.7.zip; unzip vip-scanner.0.7.zip; rm vip-scanner.0.7.zip
wget -nd https://downloads.wordpress.org/plugin/wordpress-importer.0.6.3.zip; unzip wordpress-importer.0.6.3.zip; rm wordpress-importer.0.6.3.zip


# Create artifact tarball and Upload to S3
echo "Creating Artifact and Upload it to S3 Bucket"
cd $WORK_DIR
find . | grep @tmp$ | xargs -n1 rm -fr
cp /opt/scripts/fabfile.py .

ARTIFACT_NAME=${GIT_REPO_NAME}-$new_version.tgz
included_dirs="themes plugins mu-plugins"
included_files="release.json fabfile.py"
tar --exclude=".git*" --exclude=".svn" -zcf $WORK_DIR/$ARTIFACT_NAME $included_dirs $included_files > /dev/null

S3_OPTIONS="--region {{ aws_region }} --acl bucket-owner-full-control --sse AES256"
aws s3 cp $WORK_DIR/$ARTIFACT_NAME s3://{{ jenkins.artifact_s3_bucket }}/wordpress-releases/$ARTIFACT_NAME $S3_OPTIONS > /dev/null

# Setting parameter property file
cd $WORK_DIR
echo INSTANCE_GROUP=$INSTANCE_GROUP > artifact_build.properties
echo ARTIFACT_NAME=$ARTIFACT_NAME >> artifact_build.properties
echo ARTIFACT_VERSION=$new_version >> artifact_build.properties
echo GIT_REPO_NAME=$GIT_REPO_NAME >> artifact_build.properties
echo GIT_PR_TITLE=$GIT_PR_TITLE >> artifact_build.properties


# Running smoketests on Artifact to check the major functionalities of the site
echo "Running smoketests on Artifact to check the major functionalities of the site"
git clone -b OPDE-397 https://$GIT_CREDS@github.com/Postmedia-Digital/postmedia-infrastructure.git $WORKSPACE/postmedia-infrastructure
git clone -b jenkins_test https://$GIT_CREDS@github.com/Postmedia-Digital/postmedia-automated-testing.git $WORKSPACE/postmedia-automated-testing

# We need one vHost per theme to run smoketest on it
if [ $GIT_REPO_NAME == "postmedia-theme-communities" ]; then
	vHost="thewhig"
elif [ $GIT_REPO_NAME == "postmedia-theme-npfp" ]; then
	vHost="nationalpost"
fi

echo SITE_NAME=$vHost >> artifact_build.properties
echo ANSIBLE_ROLES_PATH=postmedia-infrastructure/ansible/roles >> artifact_build.properties
echo ANSIBLE_CONFIG=postmedia-infrastructure/ansible/ansible.cfg >> artifact_build.properties